// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  username      String  @unique
  passwordHash  String
  email         String  @unique
  emailVerified Boolean @default(false)
  name          String?

  failedAttempts Int       @default(0)
  lockedUntil    DateTime?

  //2factor auth add krunga badme

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadedReels UploadedReel[]
  tags          UploadedReel[] @relation("Tagged")
  comments      Comments[]
  follower      User[]         @relation("userFollows")
  following     User[]         @relation("userFollows")

  //iske bad chatting feature dalenga
  Likes Likes[]
}

model UploadedReel {
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  id          String     @id @default(uuid())
  reelUrl     String
  description String
  title       String
  like        Likes[]
  tags        User[]     @relation("Tagged")
  comments    Comments[]

  createdAt DateTime @default(now())
}

model Likes {
  id           String       @id @default(uuid())
  parentReel   UploadedReel @relation(fields: [parentReelId], references: [id])
  parentReelId String
  user         User         @relation(fields: [userId], references: [id])
  userId       String
}

model Comments {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  content        String
  uploadedReelId String
  parentReel     UploadedReel @relation(fields: [uploadedReelId], references: [id])
  createdAt      DateTime     @default(now())
}
